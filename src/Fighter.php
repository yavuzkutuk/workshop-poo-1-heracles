<?php

class Fighter
{
    // MAX_LIFE = 100 : les combattants ont 100 points de vie max
    public const MAX_LIFE = 100;

    /*
    les propriÃ©tÃ©s

    name : le nom du combattant.
    strength : la force du combattant (permettra de calculer les points de dÃ©gÃ¢ts lors dâ€™une attaque)
    dexterity : la dextÃ©ritÃ© du combattant (permettra de calculer les points de dÃ©fense qui viendront limiter les dÃ©gÃ¢ts reÃ§us)
    life : les points de vie du combattant (initialisÃ© Ã  MAX_LIFE, ainsi ils dÃ©butent tous avec 100 point de vie.)
    */
    private string $name;
    private int $strength;
    private int $dexterity;
    private int $life;

    /*
     * ğŸ’¡HINT : un constructeur va Ãªtre nÃ©cessaire dans ta classe pour initialiser ces propriÃ©tÃ©s avec des valeurs diffÃ©rentes pour HÃ©raclÃ¨s et le Lion.

ğŸ’¡HINT: nâ€™oublie pas de faire un require de ton fichier Fighter.php si tu veux pouvoir lâ€™utiliser depuis ton fichier index.php.
     */
    public function __construct(string $name, int $strength, int $dexterity)
    {   
        $this->name = $name;
        $this->strength = $strength;
        $this->dexterity = $dexterity;
        $this->life = self::MAX_LIFE;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @param string $name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * @return int
     */
    public function getStrength(): int
    {
        return $this->strength;
    }

    /**
     * @param int|string $strength
     */
    public function setStrength($strength): void
    {
        $this->strength = $strength;
    }

    /**
     * @return int
     */
    public function getDexterity(): int
    {
        return $this->dexterity;
    }

    /**
     * @param int|string $dexterity
     */
    public function setDexterity($dexterity): void
    {
        $this->dexterity = $dexterity;
    }

    /**
     * @return int
     */
    public function getLife(): int
    {
        return $this->life;
    }

    /**
     * @param int $life
     */
    public function setLife(int $life): void
    {
        $this->life = $life;
    }

    /**
     * @return int
     */
    private function attack(): int
    {
        return rand(1,$this->getStrength());
    }

    /**
     * @param int $attack
     * @return int
     */
    private function defense(int $attack): int
    {
        return ($attack - $this->getDexterity() > 0)? ($attack - $this->getDexterity()):0;
    }

    public function fight(Fighter $enemy): void
    {
        // - Le combattant va taper plus ou moins fort Ã  chaque fois, le nombre de point de dÃ©gÃ¢ts que fait l'**attaquant** sera donc un nombre alÃ©atoire compris entre 1 et la force du combattant (utilise la fonction `rand()` ([Documentation](https://www.php.net/manual/fr/function.rand.php))
        $attack = $this->attack();
        // - Mais l'attaquÃ© peut se dÃ©fendre et esquiver ! Tu vas donc attÃ©nuer les dÃ©gÃ¢ts en soustrayant aux dommages, la dextÃ©ritÃ© de l'**attaquÃ©** (sans **jamais aller en dessous de zÃ©ro**)
       $defense = $enemy->defense($attack);
        // - Une fois les dÃ©gats calculÃ©s, diminue le nombre de points de vie de l'**attaquÃ©** par la valeur ainsi obtenue. Attention, la vie dâ€™un combattant **ne peut pas tomber en dessous de zÃ©ro**, pense Ã©galement Ã  vÃ©rifier cela;
        $enemy->setLife(($enemy->getLife() - $defense > 0)?($enemy->getLife()-$defense):0);
    }
}
